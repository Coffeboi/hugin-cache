name: Hugin Cache Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'hugin-cache'
  NODE_VERSION: '18.x'

on: 
  push:
    branches:    
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - uses: benjlevesque/short-sha@v1.2
    
    - name: Log into registry ghcr.io
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: $NODE_VERSION

    - name: Install
      run: npm install

    - name: Build
      run: npm run build --if-present

  test:
    name: test
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: $NODE_VERSION

    - name: Install
      run: npm install

    - name: Unit Test
      run: npm run test
      env:
        CI: true

    # Code Coverage

  build-docker:
    name: build-docker
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
    - name: Build Docker
      run: |
        docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} \
        -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest .

    - name: Publish Docker
      run: |
        docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}
        docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest

  # Deploy
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Check out the codebase.
#      uses: actions/checkout@v2
#
#    - name: Set up Python 3.
#      uses: actions/setup-python@v2
#      with:
#        python-version: '3.x'
#
#    - name: Install Ansible.
#      run: pip3 install ansible-core
#
#    - name: Trigger a new import on Galaxy.
#      run: >-
#        ansible-galaxy role import --api-key ${{ secrets.GALAXY_API_KEY }}
#        $(echo ${{ github.repository }} | cut -d/ -f1) $(echo ${{ github.repository }} | cut -d/ -f2)